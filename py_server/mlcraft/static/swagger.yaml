openapi: 3.0.0
info:
  title: Swagger MLCraft - OpenAPI 3.0
  description: |-
    This is a sample MLCraft Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). With MLCraft you can build, train and use you own
    neural networks using only GUI, withou any programming. Out service is created to make machine learning
    approachable for everyone needs it!

  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
tags:
- name: "user"
  description: "Operations about user"
- name: "info"
  description: "Get information about current user"
- name: "model"
  description: "Model manipulation"
- name: "build"
  description: "Operations for building neural networks"
- name: "use"
  description: "Operations for training / evaluationg models"
paths:
  /user:
    post:
      tags:
      - user
      summary: "Adds a user"
      description: "Adds a USER"
      operationId: "add_user"
      requestBody:
        description: "User parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: "User created"
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    description: "ID of a new user"
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/NoField'
        '409':
          description: "On invalid username or password"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedError'
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - user
      summary: "Logins a user"
      description: "Starts a new user session"
      operationId: "login_user"
      requestBody:
        description: "Login  parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: "Login succeeded"
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    description: "User's ID"
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/NoField'
        '401': 
          $ref: '#/components/responses/UserNotFound'
  /models/{user_id}:
    get:
      tags:
      - info
      summary: "List of all models available to the user"
      description: "All models in the list is guaranteed to have the 'raw' field"
      operationId: "model_list"
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: "Ok"
          content:
            application/json:
              schema:
                type: array
                description: "Array containing models ids"
                items:
                  type: object
                  properties:
                    id: 
                      type: integer
                      format: int64
                    name: 
                      type: string
                example: [{"id": 1, "name": "XOR"}, {"id": 2, "name": "AND"}]
        '404':
          $ref: '#/components/responses/UserNotFound'
  /model/{user_id}:
    post:
      tags:
      - model
      summary: "Adds a new model for a certain user"
      description: "Adds a MODEL"
      operationId: "add_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: "Model  parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: "A new model created"
          content:
            application/json:
              schema:
                properties:
                  model_id:
                    description: "ID of a new model"
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/NoField'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /{user_id}/{model_id}:
    get:
      tags:
      - model
      summary: "Get the model's drawflow representation"
      description: "Get the json in drawflow format"
      operationId: "get_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      responses:
        '200':
          description: "Ok"
          content: 
            application/json:
              example: |- 
                { "drawflow": { "Home": ... }}
        '401': 
          $ref: '#/components/responses/UserNotFound'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
    put:
      tags: 
      - model
      summary: "Update model's name and 'raw' representation"
      description: "Names can repeat, all json fields are optional"
      operationId: "put_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Name and 'raw' string"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: "XOR model"
                raw:
                  type: string
      responses:
        '200':
          description: "Model updated"
        '401': 
          $ref: '#/components/responses/UserNotFound'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
        '415':
          $ref: '#/components/responses/NoJson'
    delete:
      tags: 
      - model
      summary: "Delete model"
      description: "Delete a model, by id, from database, forever"
      operationId: "delete_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      responses:
        '200':
          description: "Model deleted"
        '401': 
          $ref: '#/components/responses/UserNotFound'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
  /{user_id}/{model_id}/copy:
    put:
      tags:
      - model
      summary: "Duplicate a model"
      description: "Creates a new model in database, copies `content` and `is_trained` fields of a current model into it"
      operationId: "copy_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      responses:
        '201':
          description: "Model copied successfully, returns new model's `id`"
          content: 
            application/json:
              schema:
                description: "Created model's `id`"
                properties:
                  model_id:
                    description: "New models id"
                    type: integer
                    format: int64
        '401': 
          $ref: '#/components/responses/UserNotFound'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
  /{user_id}/{model_id}/copy/{dst_model_id}:
    put:
      tags: 
      - model
      summary: "Copies one model's content to another"
      description: "Copies `content` and `is_trained` fields to the destination model"
      operationId: "assign_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
        - $ref: '#/components/parameters/DestinationModelId'
      responses:
        '201':
          description: "Model copied successfully"
        '401': 
          $ref: '#/components/responses/UserNotFound'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
  /layer/{user_id}/{model_id}:
    post:
      tags:
      - build
      summary: "Adds a new layer for a certain Model"
      description: "Adds a LAYER"
      operationId: "add_layer"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Layer parameters (create)"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerCreate'
      responses:
        '201':
          description: "A new layer created"
          content:
            application/json:
              schema:
                properties:
                  layer_id:
                    description: "ID of a new layer"
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
            $ref: '#/components/responses/ModelNotFound'
    put:
      tags:
      - build
      summary: "Updates a certain layer of a certain model"
      description: "Adds a LAYER"
      operationId: "update_layer"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Layer parameters (update)"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerUpdate'
      responses:
        '200':
          description: "Layer successfully updated"
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/LayerModelNotFound'
  /delete_layer/{user_id}/{model_id}:
    put:
      tags:
      - build
      summary: "Deletes a model's layer"
      description: "DELETES a LAYER"
      operationId: "delete_layer"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Parameters of the layer to be deleted"
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
      responses:
        '200':
          description: "Layer deleted successfully"
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/LayerModelNotFound'
  /clear_model/{user_id}/{model_id}:
    post:
      tags:
      - build
      summary: "Clears the model"
      description: "Deletes all model's layers and connections"
      operationId: "clear_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      responses:
        '200':
          description: "Model successfully cleared"
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
  /connection/{user_id}/{model_id}:
    post:
      tags:
      - build
      summary: "Adds a new between-layers connection to the model"
      description: "Adds a new CONNECTION between layers"
      operationId: "add_connection"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Connection parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        '201':
          description: "A new connection created"
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
        '412':
          description: "Issue with model graph structure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /delete_connection/{user_id}/{model_id}:
    put:
      tags:
      - build
      summary: "Deletes a model's connection"
      description: "DELETES a CONNECTION"
      operationId: "delete_connection"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Parameters of the connection to be deleted"
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
      responses:
        '200':
          description: "Connection deleted successfully"
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ConnectionNotFound'
  /update_parents_order/{user_id}/{model_id}:
    put:
      tags:
      - build
      summary: "Reorders layer's parents"
      description: "REORDERS parents"
      operationId: "updates_parents_order"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      requestBody:
        description: "Parameters of the connection to be deleted"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParentsOrder'
      responses:
        '200':
          description: "Parents order updated successfully"
        '400':
          $ref: '#/components/responses/NoField'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/LayerModelNotFound'
  /train/{user_id}/{model_id}/{safe}:
    put:
      tags:
      - use
      summary: "Trains a model"
      description: "TRAINS a model"
      operationId: "train_model"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
        - name: safe
          in: path
          description: flag, if 0, then the training process will be started even if the model is already trained
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Model is trained"
        '400':
          description: "Some problems with model"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
        '406':
          description: "Model you want to train is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: "Training time limit exceeded"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: "Model is already trained. Maybe you want to change 'safe' to 0"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /predict/{user_id}/{model_id}:
    put:
      tags:
      - use
      summary: "Makes prediction with a model"
      description: "EXPLOITS a model"
      operationId: "model_predict"
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ModelId'
      responses:
        '200':
          description: "Prediction was successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictResult'
        '400':
          description: "Some problems with model"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          $ref: '#/components/responses/ModelForbidden'
        '404':
          $ref: '#/components/responses/ModelNotFound'
        '408':
          description: "Evaluating time limit exceeded"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: "Model is not trained. You have to train the model first"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /update_metrics/{user_id}/{model_id}:
    put:
      tags:
      - use
      summary: "Writes new values of a metric"
      description: "WRITES metric values"
      operationId: "updates_metrics"
      parameters:
        - name: user_id
          in: path
          description: model owner's ID
          required: true
          schema:
            type: integer
            format: int64
        - name: model_id
          in: path
          description: model's ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: "Information about new metric's values"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteMetricValues'
      responses:
        '200':
          description: "Metrics updated successfully"
        '400':
          description: "Json isn't provided or required fields missing"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: "The model does not exist or you have no rights for changing it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Model / layer does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /get_metrics/{user_id}/{model_id}/{get_loss}:
    put:
      tags:
      - use
      summary: "Reads metric's values from database"
      description: "READS metric values"
      operationId: "get_metrics"
      parameters:
        - name: user_id
          in: path
          description: model owner's ID
          required: true
          schema:
            type: integer
            format: int64
        - name: model_id
          in: path
          description: model's ID
          required: true
          schema:
            type: integer
            format: int64
        - name: get_loss
          in: path
          description: 1 if loss is needed, 0 - otherwise
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: "Information about metric's values to read"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadMetricValues'
      responses:
        '200':
          description: "Successful read"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnMetricValues'
        '400':
          description: "Json isn't provided or required fields missing"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: "The model does not exist or you have no rights for changing it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Model / layer does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /get_plots/{user_id}/{model_id}/{get_loss}:
    put:
      tags:
      - use
      summary: "Get plot of metrics from the database"
      description: "PLOTS metric values"
      operationId: "get_plots"
      parameters:
        - name: user_id
          in: path
          description: model owner's ID
          required: true
          schema:
            type: integer
            format: int64
        - name: model_id
          in: path
          description: model's ID
          required: true
          schema:
            type: integer
            format: int64
        - name: get_loss
          in: path
          description: 1 if loss is needed, 0 - otherwise
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: "Information about metric's values to read"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadMetricValues'
      responses:
        '200':
          description: "Returns PNG"
          schema:
            type: file
        '400':
          description: "Json isn't provided or required fields missing"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: "The model does not exist or you have no rights for changing it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Model / layer does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
components:
  schemas:
    User:
      type: object
      properties:
        login:
          type: string
          example: "JohnDoe"
        password:
          type: string
          example: "qwerty12345"
        mail:
          type: string
          example: "johnd@e.com"
    Model:
      type: object
      properties:
        name:
          type: string
          example: MCS-GPT
    Login:
      type: object
      properties:
        login:
          type: string
          example: "JohnDoe"
        password:
          type: string
          example: "qwerty12345"
    Connection:
      type: object
      properties:
        layer_from:
          type: integer
          format: int64
          example: 0
        layer_to:
          type: integer
          format: int64
          example: 1
    LayerCreate:
      type: object
      properties:
        type:
          type: string
          example: "Linear"
        parameters:
          type: string
          example: "inFeatures=2;outFeatures=10;bias=true"
    LayerUpdate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        parameters:
          type: string
          example: "inFeatures=2;outFeatures=10;bias=true"
    UpdateParentsOrder:
      type: object
      properties:
        new_parents:
          type: array
          items:
            type: integer
            format: int64
          example: [0, 1]
        layer_id:
          type: integer
          format: int64
          example: 2
    WriteMetricValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          example: [0.25, 0.112, 0.787, 0.238, 0.030, 0.0003]
        label:
          type: string
          example: "train"
        new_iteration:
          type: boolean
          example: true
      required:
        - values
    ReadMetricValues:
      type: object
      properties:
        label:
          type: string
          example: "train"
    Data:
      type: object
      properties:
        dataset:
          type: array
          items:
            type: number
            example: [0.0, 0.0, 0.0, 1.0]
    PredictResult:
      type: array
      items:
        type: number
        format: float
      example: [1.0]
    ReturnMetricValues:
      type: array
      items:
        type: number
        format: float
      example: [0.25, 0.112, 0.787, 0.238, 0.030, 0.0003]
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Something whent wrong"
    DetailedError:
      type: object
      properties:
        error:
          type: string
          example: "Something whent wrong"
        problemPart:
          type: string
          example: "The problem is here: ..."
  parameters:
    UserId: 
      name: user_id
      in: path
      description: model owner's ID
      required: true
      schema:
        type: integer
        format: int64
    ModelId:
      name: model_id
      in: path
      description: model's ID
      required: true
      schema:
        type: integer
        format: int64
    DestinationModelId:
      name: dst_model_id
      in: path
      description: id of a model to copy to
      required: true
      schema:
        type: integer
        format: int64
  responses:
    UserNotFound: 
      description: "The user with the provided id of yours is not found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ModelNotFound:
      description: "Requested model does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LayerModelNotFound:
      description: "Requested model or layer does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ModelForbidden:
      description: "You have no rights to access this model"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ConnectionNotFound:
      description: "Requested connection does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoJson:
      description: "Json not provided"
    NoField:
      description: "Required field is missing"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
